<?php
function reg_checkout_entity_insert($entity) {
  global $user;
  if ($entity->type == 'laborday_retreat') {
    //display all the values in the entity in a dpm, you can expand the dpm to see all the field values and use them like this
    //dpm($entity);
    if ($entity->field_full_or_part_time[LANGUAGE_NONE]['0']['value'] == 0) {
      //it's a part time registration
      //loop through which days
      $night_counter = '';
      $breakfast_meal_counter = '';
      $lunch_meal_counter = '';
      $dinner_meal_counter = '';

      foreach ($entity->field_which_days[LANGUAGE_NONE] as $key => $value) {
        //see if they have the night checked
        //dpm($value);
        $value = strtolower($value['value']);
        //there is no monday night, so if the value is not monday, check if the night is checked and increment the counter
        if ($value != 'monday'){
          $field_name = "field_$value"."_night";
          $meal_field_name = "field_$value"."_meals";
          if ($entity->{"$field_name"}[LANGUAGE_NONE]['0']['value'] != 1){
            $night_counter++;

          }
          else {
            foreach ($entity->{"$meal_field_name"}[LANGUAGE_NONE] as $key => $value) {
              //see if they have any meals checked
              switch ($value['value']) {
                case 'Breakfast':
                  $breakfast_meal_counter++;
                  break;
                case 'Lunch':
                  $lunch_meal_counter++;
                  break;
                case 'Dinner':
                  $dinner_meal_counter++;
                  break;
              }
            }
          }

        }
      }
      if ($night_counter == 1){
        //add one night product to cart
        $product_id = get_part_time_product_id($entity->field_age_at_ldr[LANGUAGE_NONE]['0']['value'], 1);
        add_product_to_cart($product_id, 1);
      }
      else if ($night_counter == 2) {
        //add two night product to cart
        $product_id = get_part_time_product_id($entity->field_age_at_ldr[LANGUAGE_NONE]['0']['value'], 2);
        add_product_to_cart($product_id, 1);
      }
      foreach ($entity->field_monday_breakfast[LANGUAGE_NONE] as $key => $value) {
        //see if they have any meals checked
        //dpm($value);
        //if the monday meal is checked, increment the counter
        if ($value['value'] == 0) {
          $breakfast_meal_counter++;
        }
      }
      if ($breakfast_meal_counter > 0) {
        add_product_to_cart(17, $breakfast_meal_counter);
      }
      if ($lunch_meal_counter > 0) {
        add_product_to_cart(18, $lunch_meal_counter);
      }
      if ($dinner_meal_counter > 0) {
        add_product_to_cart(10, $dinner_meal_counter);
      }
    }
    else {
      //it's a full time registration
      $product_id = get_full_time_product_id($entity->field_age_at_ldr[LANGUAGE_NONE]['0']['value']);
      add_product_to_cart($product_id, 1);
    }

    drupal_set_message("Registration for <b>".$entity->field_first_name[LANGUAGE_NONE]['0']['value']."</b> has been successfully submitted.");
    drupal_set_message("Fill out the form again, to register another person, or head to the <a href='/cart'>cart</a> to get payment instructions.<br>You will not be considered as registered and your room will not be assigned until payment is received.");
  }
}

function add_product_to_cart($product_id, $quantity) {
  global $user;
  //load up the product id
  $product = commerce_product_load($product_id);
  //create a line item with the product and the quantity
  $line_item = commerce_product_line_item_new($product, $quantity, 0);
  // Add to current user's cart: if the user is not logged in ($user->uid: 0) Drupal Commerce manages the $_SESSION
  commerce_cart_product_add($user->uid, $line_item);
}
function get_full_time_product_id($age) {
  if ($age <= 3) {
    $product_id = 6;
  }
  if ($age <= 6 && $age > 3) {
    $product_id = 5;
  }
  if ($age <= 9 && $age > 6) {
    $product_id = 4;
  }
  if ($age <= 12 && $age > 9) {
    $product_id = 3;
  }
  if ($age <= 15 && $age > 12) {
    $product_id = 2;
  }
  if ($age > 15) {
    $product_id = 1;
  }
  return $product_id;
}

function get_part_time_product_id($age, $day_count) {
  if ($age <= 3 && $day_count == 1) {
    $product_id = 11;
  }
  if ($age <= 9 && $age > 3 && $day_count == 1) {
    $product_id = 12;
  }
  if ($age > 9 && $day_count == 1) {
    $product_id = 13;
  }
  if ($age <= 3 && $day_count == 2) {
    $product_id = 14;
  }
  if ($age <= 9 && $age > 3 && $day_count == 2) {
    $product_id = 15;
  }
  if ($age > 9 && $day_count == 2) {
    $product_id = 16;
  }

  return $product_id;

}


function reg_checkout_form_validate(&$form, &$form_state){
  //dsm($form);
  //foreach days checked, see if they're coming that night
  foreach($form['field_which_days'][LANGUAGE_NONE]['#value'] as $value){
    //check if monday is selected and if they don't have a breakfast choice
    if ($value == 'Monday' && $form['field_monday_breakfast']['und']['#value'] === NULL ) {
      form_set_error('form', "You need to tell us if you need $value breakfast");
    }
    //if it's not monday, check and see if they told us if they're coming for that night
    if ($value != 'Monday') {
      $field_name = "field_".strtolower($value)."_night";
      //if they didn't tell us, throw an error
      if( $form[$field_name]['und']['#value'] === NULL && $value != 'Monday' ) {
        form_set_error('form', "You need to tell us if you're coming for $value night.");
      }
      //if they told us that they're coming for the day only, make sure they picked some meal
      if( $form[$field_name]['und']['#value'] == 1) {
        $meal_field_name = "field_".strtolower($value)."_meals";
        if( empty($form[$meal_field_name]['und']['#value'])) {
          form_set_error('form', "You need to tell us which meals you plan on purchasing for $value");
        }
      }
    }
  }
}
function reg_checkout_form_alter(&$form, &$form_state, $form_id){

  //this would hide the update cart button and disable the quantity field
  if ($form_id === 'views_form_commerce_cart_form_default') {
    //$form['actions']['submit']['#access'] = FALSE;
    foreach($form['edit_quantity'] as &$quantity) {
      if (is_array($quantity)) {
        //$quantity['#disabled'] = TRUE;
      }
    }
  }
  // target a single form
  if($form_id == "registration_form"){
    //do custom validation
    $form['#validate'][] = 'reg_checkout_form_validate';
  }
}
function reg_checkout_element_info_alter(&$type) {
  $type['radios']['#process'][] = '_reg_checkout_remove_radio_na';
}

function _reg_checkout_remove_radio_na($element) {
  unset($element['#options']['_none']);
  unset($element['_none']);
  return $element;
}
